{"meta":{"title":"MainGuo的博客","subtitle":"MainGuo-blog","description":"郭彬杰的博客","author":"郭彬杰","url":"https://blog.mainguo.top"},"pages":[],"posts":[{"title":"基于CloudFlare的DDNS解析","slug":"基于CloudFlare的DDNS解析","date":"2019-02-13T06:14:56.000Z","updated":"2019-02-13T07:24:37.667Z","comments":true,"path":"2019/02/13/基于CloudFlare的DDNS解析/","link":"","permalink":"https://blog.mainguo.top/2019/02/13/基于CloudFlare的DDNS解析/","excerpt":"准备工作&emsp;&emsp;注册一个cloudflare账号后，按照cloudflare给出的提示，将域名接入cloudflare。（即DNS为CF提供的地址）","text":"准备工作&emsp;&emsp;注册一个cloudflare账号后，按照cloudflare给出的提示，将域名接入cloudflare。（即DNS为CF提供的地址） 一、获取cloudflare账号的global key&emsp;&emsp;打开网页：https://dash.cloudflare.com/profile &emsp;&emsp;在页面下方找到【Global API Key】，点击右侧的View查看Key，并保存下来 二、设置用于 DDNS 解析的二级域名&emsp;&emsp;在 Cloudflare 中新建一个A记录，如：ddns.yourdomain.com，指向 1.1.1.1（可随意指定，如123.123.123.123等等，主要用于后续查看 DDNS 三、下载 DDNS 脚本,修改配置12wget -N --no-check-certificate https://raw.githubusercontent.com/yulewang/cloudflare-api-v4-ddns/master/cf-v4-ddns.shvim cf-v4-ddns.sh &emsp;&emsp;输入 i 进入vim编辑模式，按照下图中的例子填写配置项后按 ESC 键并输入 wq 再按回车键，即保存并退出。 &emsp;&emsp;1.CFKEY就是第一步获取的global key&emsp;&emsp;2.CFUSER是登录cloudflare的邮箱&emsp;&emsp;3.CFZONE_NAME是你的一级域名&emsp;&emsp;4.CFRECORD_NAME则是用于DDNS的二级域名&emsp;&emsp;5.CFTTL是域名生效的ttl，默认120即可 四、脚本授权并执行12chmod +x cf-v4-ddns.sh./cf-v4-ddns.sh 如果脚本相关信息填写正确，输出内容会显示当前母鸡IP，登录 Cloudflare DNS选项 查看之前设置的 1.1.1.1 已变为母鸡IP 五、设置定时任务123输入 crontab -e 然后会弹出 vi 编辑界面，在文件里面添加一行：*/2 * * * * /root/cf-v4-ddns.sh &gt;/dev/null 2&gt;&amp;1 如果您需要日志文件，可将上述代码请替换成下面代码1*/2 * * * * /root/cf-v4-ddns.sh &gt;&gt; /var/log/cf-ddns.log 2&gt;&amp;1 本文复制粘贴于 https://blog.natcloud.net/cf-ddns.html","categories":[{"name":"实用功能","slug":"实用功能","permalink":"https://blog.mainguo.top/categories/实用功能/"}],"tags":[{"name":"cloudflare","slug":"cloudflare","permalink":"https://blog.mainguo.top/tags/cloudflare/"},{"name":"ddns","slug":"ddns","permalink":"https://blog.mainguo.top/tags/ddns/"}]},{"title":"hexo 一键发布文章","slug":"Hexo 一键操作","date":"2018-12-09T09:50:35.000Z","updated":"2018-12-09T10:11:39.309Z","comments":true,"path":"2018/12/09/Hexo 一键操作/","link":"","permalink":"https://blog.mainguo.top/2018/12/09/Hexo 一键操作/","excerpt":"一、吐槽&emsp;&emsp;刚开始使用hexo的时候简直无法忍受繁杂的部署命令,不仅要输入以下命令来更新，并且还要在指定的目录下打开 git bash，这让怕麻烦的我十分难受…12hexo cleanhexo g -d","text":"一、吐槽&emsp;&emsp;刚开始使用hexo的时候简直无法忍受繁杂的部署命令,不仅要输入以下命令来更新，并且还要在指定的目录下打开 git bash，这让怕麻烦的我十分难受…12hexo cleanhexo g -d 二、搞事情&emsp;&emsp;注意事项：下面的命令中 C:\\blog_backup 是我博客的文件夹路径，请替换为你自己博客的路径任意目录打开 git bash ，输入以下命令12git config --global alias.fuck '!cd C:\\blog_backup;hexo clean;hexo g -d'git fuck &emsp;&emsp;以后就可以在任意目录下通过 git fuck 来一键更新了。 三、如何取消别名1git config --global --unset alias.fuck","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.mainguo.top/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.mainguo.top/tags/hexo/"},{"name":"骚操作","slug":"骚操作","permalink":"https://blog.mainguo.top/tags/骚操作/"}]},{"title":"phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法","slug":"phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法","date":"2018-12-07T16:16:13.437Z","updated":"2018-12-07T16:17:04.154Z","comments":true,"path":"2018/12/08/phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法/","link":"","permalink":"https://blog.mainguo.top/2018/12/08/phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法/","excerpt":"&emsp;&emsp;在我的linux环境下安装的lnmp和lamp环境都没有出现过phpmyadmin页面卡顿的情况，甚至在windows下，我使用appserv亦没有这样的糟糕体验。","text":"&emsp;&emsp;在我的linux环境下安装的lnmp和lamp环境都没有出现过phpmyadmin页面卡顿的情况，甚至在windows下，我使用appserv亦没有这样的糟糕体验。 解决办法&emsp;&emsp;1.下载最新版本的phpmyadmin：https://www.phpmyadmin.net&emsp;&emsp;2.将下载好的phpmyadmin解压出来，重命名后放到原phpmyadmin同目录下&emsp;&emsp;3.修改配置文件，将localhost修改为127.0.0.1&emsp;&emsp;fuck（phpmyadmin），这里访问phpmyadmin的方式就是：127.0.0.1/fuck，因为我将其命名为fuck了 =。=&emsp;&emsp;卡顿的情况会有所改善，但还是没有其他环境下那么丝滑…至于效果的话，各位看官亲测一下好了","categories":[{"name":"PHP","slug":"PHP","permalink":"https://blog.mainguo.top/categories/PHP/"}],"tags":[{"name":"phpmyadmin","slug":"phpmyadmin","permalink":"https://blog.mainguo.top/tags/phpmyadmin/"},{"name":"phpstudy","slug":"phpstudy","permalink":"https://blog.mainguo.top/tags/phpstudy/"}]},{"title":"3分钟为反向代理架设的Gogs增加https服务(nginx)","slug":"3分钟为反向代理架设的gogs增加https服务(nginx)","date":"2018-10-14T08:17:44.000Z","updated":"2018-11-20T01:39:16.588Z","comments":true,"path":"2018/10/14/3分钟为反向代理架设的gogs增加https服务(nginx)/","link":"","permalink":"https://blog.mainguo.top/2018/10/14/3分钟为反向代理架设的gogs增加https服务(nginx)/","excerpt":"一、环境&emsp;&emsp;我把Gogs架设在了阿里云学生机上，使用的是CentOS7.4 x64，利用宝塔Linux面板安装了lnmp的运行环境。&emsp;&emsp;在此前尚未增加https的时候，我是利用nginx的反向代理，把80端口转发到3000端口（Gogs的默认服务端口是3000）就可以直接访问搭建完成的Gogs了，配置如下","text":"一、环境&emsp;&emsp;我把Gogs架设在了阿里云学生机上，使用的是CentOS7.4 x64，利用宝塔Linux面板安装了lnmp的运行环境。&emsp;&emsp;在此前尚未增加https的时候，我是利用nginx的反向代理，把80端口转发到3000端口（Gogs的默认服务端口是3000）就可以直接访问搭建完成的Gogs了，配置如下12345678server &#123; listen 80; server_name www.host.com; location / &#123; proxy_pass http://localhost:3000; &#125;&#125; 二、增加Https&emsp;&emsp;本文重点不在于解决搭建Gogs中出现的问题，望周知。 2.1、申请HTTPS证书，并下载证书相关文件&emsp;&emsp;在阿里云处填写相关信息并提交申请后，你可以下载到一个压缩包，其中包含了 fileName.pem / fileName.key 两个文件 2.2、修改Gogs配置文件&emsp;&emsp;打开FXtp或其他工具，在gogs的安装目录中 custom/conf/app.ini 文件中修改下列配置选项1234567[server]PROTOCOL = https#注意这里要改成https://ROOT_URL = https://www.host.com/#证书文件CERT_FILE = custom/https/fileName.pemKEY_FILE = custom/https/fileName.pem 2.3、修改nginx反向代理配置&emsp;&emsp;此前默认的设置如下12345678server &#123; listen 80; server_name www.host.com; location / &#123; proxy_pass http://localhost:3000; &#125;&#125; &emsp;&emsp;现在修改为下面的配置123456789101112131415161718192021server &#123; listen 443; server_name www.host.com; ssl on; ssl_certificate /home/git/gogs/custom/https/fileName.pem; ssl_certificate_key /home/git/gogs/custom/https/fileName.key; ssl_session_timeout 5m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; location / &#123; #这里主要也要将http://修改为https:// proxy_pass https://localhost:3000; &#125;&#125;server &#123; #HTTP跳转HTTPS listen 80; server_name www.host.com; rewrite ^(.*)$ https://$host$1 permanent;&#125; &emsp;&emsp;修改后重启nginx后就可以享受https了。 三、心得&emsp;&emsp;事实上，在2.2这个步骤完成后就可以通过访问 https://你的IP地址:3000 看到，https实际上已经开启了。也就是说你如果不需要用域名访问你的gogs，直接开放3000端口，做到2.2步骤就可以了。&emsp;&emsp;但我是通过开放443和80使用域名来进行端口转发的，这样的好处是：只要开放80端口，就可以直接访问你的网站，而不需要一个网站开一个端口。","categories":[{"name":"Gogs","slug":"Gogs","permalink":"https://blog.mainguo.top/categories/Gogs/"}],"tags":[{"name":"https","slug":"https","permalink":"https://blog.mainguo.top/tags/https/"},{"name":"gogs","slug":"gogs","permalink":"https://blog.mainguo.top/tags/gogs/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.mainguo.top/tags/nginx/"}]},{"title":"PHP转换gb2312编码xml为数组对象","slug":"php转换gb2312编码xml为数组对象","date":"2018-09-02T15:24:04.000Z","updated":"2018-11-20T01:39:14.277Z","comments":true,"path":"2018/09/02/php转换gb2312编码xml为数组对象/","link":"","permalink":"https://blog.mainguo.top/2018/09/02/php转换gb2312编码xml为数组对象/","excerpt":"","text":"&emsp;&emsp;调用中间件接口的返回值是一个xml字符串，其中 charset=”GB2312”，但奇怪的是我使用 mb_detect_encoding() 函数来判断这个xml字符串，得到的结果却是 UTF-8。但由于 xml 中 charset 的值为 GB2312，所以导致了 simplexml_load_string() 函数无法成功解析这个xml字符串。 &emsp;&emsp;其实解决这个错误非常简单,使用 str_replace 函数将xml字符串中的编码格式替换为 UTF-8 后再使用json编码解码后就可以得到干净的数组元素。 1234$xml= str_replace(&apos;GB2312&apos;,&apos;UTF-8&apos;,$xml);$xml= simplexml_load_string($xml);$xml= json_encode($xml);//将对象转换个JSON$xml=json_decode($xml,JSON_UNESCAPED_UNICODE);//将json转换成数组","categories":[{"name":"PHP","slug":"PHP","permalink":"https://blog.mainguo.top/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.mainguo.top/tags/PHP/"},{"name":"xml转array","slug":"xml转array","permalink":"https://blog.mainguo.top/tags/xml转array/"}]}]}