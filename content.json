{"meta":{"title":"MainGuo的博客","subtitle":"MainGuo-blog","description":"郭彬杰的博客","author":"郭彬杰","url":"https://blog.mainguo.top"},"pages":[],"posts":[{"title":"phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法","slug":"phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法","date":"2018-11-17T09:08:49.152Z","updated":"2018-10-28T00:10:37.153Z","comments":true,"path":"2018/11/17/phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法/","link":"","permalink":"https://blog.mainguo.top/2018/11/17/phpstudy环境下phpmyadmin页面打开缓慢、卡顿解决办法/","excerpt":"&emsp;&emsp;在我的linux环境下安装的lnmp和lamp环境都没有出现过phpmyadmin页面卡顿的情况，甚至在windows下，我使用appserv亦没有这样的糟糕体验。","text":"&emsp;&emsp;在我的linux环境下安装的lnmp和lamp环境都没有出现过phpmyadmin页面卡顿的情况，甚至在windows下，我使用appserv亦没有这样的糟糕体验。 解决办法&emsp;&emsp;1.下载最新版本的phpmyadmin：https://www.phpmyadmin.net&emsp;&emsp;2.将下载好的phpmyadmin解压出来，重命名后放到原phpmyadmin同目录下&emsp;&emsp;3.修改配置文件，将localhost修改为127.0.0.1&emsp;&emsp;fuck（phpmyadmin），这里访问phpmyadmin的方式就是：127.0.0.1/fuck，因为我将其命名为fuck了 =。=&emsp;&emsp;卡顿的情况会有所改善，但还是没有其他环境下那么丝滑…至于效果的话，各位看官亲测一下好了","categories":[{"name":"PHP","slug":"PHP","permalink":"https://blog.mainguo.top/categories/PHP/"}],"tags":[{"name":"phpmyadmin","slug":"phpmyadmin","permalink":"https://blog.mainguo.top/tags/phpmyadmin/"},{"name":"phpstudy","slug":"phpstudy","permalink":"https://blog.mainguo.top/tags/phpstudy/"}]},{"title":"3分钟为反向代理架设的Gogs增加https服务(nginx)","slug":"3分钟为反向代理架设的Gogs增加https服务(nginx)","date":"2018-10-14T08:17:44.000Z","updated":"2018-10-15T06:00:30.445Z","comments":true,"path":"2018/10/14/3分钟为反向代理架设的Gogs增加https服务(nginx)/","link":"","permalink":"https://blog.mainguo.top/2018/10/14/3分钟为反向代理架设的Gogs增加https服务(nginx)/","excerpt":"一、环境&emsp;&emsp;我把Gogs架设在了阿里云学生机上，使用的是CentOS7.4 x64，利用宝塔Linux面板安装了lnmp的运行环境。&emsp;&emsp;在此前尚未增加https的时候，我是利用nginx的反向代理，把80端口转发到3000端口（Gogs的默认服务端口是3000）就可以直接访问搭建完成的Gogs了，配置如下","text":"一、环境&emsp;&emsp;我把Gogs架设在了阿里云学生机上，使用的是CentOS7.4 x64，利用宝塔Linux面板安装了lnmp的运行环境。&emsp;&emsp;在此前尚未增加https的时候，我是利用nginx的反向代理，把80端口转发到3000端口（Gogs的默认服务端口是3000）就可以直接访问搭建完成的Gogs了，配置如下12345678server &#123; listen 80; server_name www.host.com; location / &#123; proxy_pass http://localhost:3000; &#125;&#125; 二、增加Https&emsp;&emsp;本文重点不在于解决搭建Gogs中出现的问题，望周知。 2.1、申请HTTPS证书，并下载证书相关文件&emsp;&emsp;在阿里云处填写相关信息并提交申请后，你可以下载到一个压缩包，其中包含了 fileName.pem / fileName.key 两个文件 2.2、修改Gogs配置文件&emsp;&emsp;打开FXtp或其他工具，在gogs的安装目录中 custom/conf/app.ini 文件中修改下列配置选项1234567[server]PROTOCOL = https#注意这里要改成https://ROOT_URL = https://www.host.com/#证书文件CERT_FILE = custom/https/fileName.pemKEY_FILE = custom/https/fileName.pem 2.3、修改nginx反向代理配置&emsp;&emsp;此前默认的设置如下12345678server &#123; listen 80; server_name www.host.com; location / &#123; proxy_pass http://localhost:3000; &#125;&#125; &emsp;&emsp;现在修改为下面的配置123456789101112131415161718192021server &#123; listen 443; server_name www.host.com; ssl on; ssl_certificate /home/git/gogs/custom/https/fileName.pem; ssl_certificate_key /home/git/gogs/custom/https/fileName.key; ssl_session_timeout 5m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; location / &#123; #这里主要也要将http://修改为https:// proxy_pass https://localhost:3000; &#125;&#125;server &#123; #HTTP跳转HTTPS listen 80; server_name www.host.com; rewrite ^(.*)$ https://$host$1 permanent;&#125; &emsp;&emsp;修改后重启nginx后就可以享受https了。 三、心得&emsp;&emsp;事实上，在2.2这个步骤完成后就可以通过访问 https://你的IP地址:3000 看到，https实际上已经开启了。也就是说你如果不需要用域名访问你的gogs，直接开放3000端口，做到2.2步骤就可以了。&emsp;&emsp;但我是通过开放443和80使用域名来进行端口转发的，这样的好处是：只要开放80端口，就可以直接访问你的网站，而不需要一个网站开一个端口。","categories":[{"name":"Gogs","slug":"Gogs","permalink":"https://blog.mainguo.top/categories/Gogs/"}],"tags":[{"name":"https","slug":"https","permalink":"https://blog.mainguo.top/tags/https/"},{"name":"gogs","slug":"gogs","permalink":"https://blog.mainguo.top/tags/gogs/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.mainguo.top/tags/nginx/"}]},{"title":"vultr主机搭建ssr","slug":"vultr主机搭建ssr","date":"2018-09-18T03:08:05.000Z","updated":"2018-10-15T10:48:05.863Z","comments":true,"path":"2018/09/18/vultr主机搭建ssr/","link":"","permalink":"https://blog.mainguo.top/2018/09/18/vultr主机搭建ssr/","excerpt":"1.vultr机房测速&emsp;&emsp;可以去网上搜索一下vultr中文网给的测速文件，是vultr中文网在官方公布的测试数据的基础上简单写了一个批处理文件，使用 Windows 系统的朋友可以下载测试脚本：点我下载！！！&emsp;&emsp;压缩包解压缩后双击运行，按照下图提示进行操作即可。&emsp;&emsp;注意脚本会对每个机房进行 10 次 Ping 测试，测试完成后请不要按任意键继续，否则会退出脚本。请先挑选出延迟较低的机房，然后再退出。&emsp;&emsp;我选择的是Silicon Valley地区的服务器 2.氪金&emsp;&emsp;vultr用paypal充值5刀送25刀","text":"1.vultr机房测速&emsp;&emsp;可以去网上搜索一下vultr中文网给的测速文件，是vultr中文网在官方公布的测试数据的基础上简单写了一个批处理文件，使用 Windows 系统的朋友可以下载测试脚本：点我下载！！！&emsp;&emsp;压缩包解压缩后双击运行，按照下图提示进行操作即可。&emsp;&emsp;注意脚本会对每个机房进行 10 次 Ping 测试，测试完成后请不要按任意键继续，否则会退出脚本。请先挑选出延迟较低的机房，然后再退出。&emsp;&emsp;我选择的是Silicon Valley地区的服务器 2.氪金&emsp;&emsp;vultr用paypal充值5刀送25刀 3.选机房购买服务器&emsp;&emsp;机房位置我选择了Silicon Valley，系统选Debian 9 x64，选$5的，$2.5是只能使用ipv6的，且每个月只有500GB（下载上传流量哪个多就算哪个）因为ipv6尚未成熟的关系，我就选择不用它了，勾选启用ipv6（蛮选的），后面就无关紧要了，你随意就好 4.检查一下你的ip是否被河蟹&emsp;&emsp;(一)点我！！！去扫描你的ip端口，如果你的22端口是开启状态，或者说能使用ssh服务的话，基本上你的ip是没问题的。&emsp;&emsp;(二)点我！！！测ping，不是红色的超时就说明你的ip是可以被ping通的&emsp;&emsp;以上两步都检测都通过，则ip可用&emsp;&emsp;不过世上不如意之事十之八九，有很多ip是被墙的，大部分情况是能ping通、但22端口关闭，无法使用ssh服务。这个时候等待五分钟（服务器部署满5分钟后才可以destroy），然后删除主机，重新deploy one… 5.在服务器上安装ssr服务&emsp;&emsp;输入以下命令1wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh 按照提示输入配置，enjoy it~ 支持 限制 用户速度 支持 限制 用户设备数 支持 限制 用户总流量 支持 定时 流量清零 支持 显示 当前连接IP 支持 显示 SS/SSR连接+二维码 支持 一键安装 锐速 支持 一键安装 BBR 支持 一键封禁 垃圾邮件(SMAP)/BT/PT 6.安装谷歌BBR防阻塞协议&emsp;&emsp;输入以下命令进入一键管理脚本1bash ssrmu.sh &emsp;&emsp;输入14并回车&emsp;&emsp;输入1并回车 &emsp;&emsp;输入1并回车 &emsp;&emsp;之后在安装过程中如果提示Y/N? yes/no?根据提示的不同输入y或yes，提示更换系统内核的时候按下tab键，选择不更换内核。等待服务器重新启动完成后就可以正常使用SSR了","categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://blog.mainguo.top/categories/科学上网/"}],"tags":[{"name":"vps","slug":"vps","permalink":"https://blog.mainguo.top/tags/vps/"},{"name":"ssr","slug":"ssr","permalink":"https://blog.mainguo.top/tags/ssr/"},{"name":"vpn","slug":"vpn","permalink":"https://blog.mainguo.top/tags/vpn/"}]},{"title":"PHP转换gb2312编码xml为数组对象","slug":"PHP转换gb2312编码xml为数组对象","date":"2018-09-02T15:24:04.000Z","updated":"2018-10-26T15:21:36.354Z","comments":true,"path":"2018/09/02/PHP转换gb2312编码xml为数组对象/","link":"","permalink":"https://blog.mainguo.top/2018/09/02/PHP转换gb2312编码xml为数组对象/","excerpt":"","text":"&emsp;&emsp;调用中间件接口的返回值是一个xml字符串，其中 charset=”GB2312”，但奇怪的是我使用 mb_detect_encoding() 函数来判断这个xml字符串，得到的结果却是 UTF-8。但由于 xml 中 charset 的值为 GB2312，所以导致了 simplexml_load_string() 函数无法成功解析这个xml字符串。 &emsp;&emsp;其实解决这个错误非常简单,使用 str_replace 函数将xml字符串中的编码格式替换为 UTF-8 后再使用json编码解码后就可以得到干净的数组元素。 1234$xml= str_replace(&apos;GB2312&apos;,&apos;UTF-8&apos;,$xml);$xml= simplexml_load_string($xml);$xml= json_encode($xml);//将对象转换个JSON$xml=json_decode($xml,JSON_UNESCAPED_UNICODE);//将json转换成数组","categories":[{"name":"PHP","slug":"PHP","permalink":"https://blog.mainguo.top/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.mainguo.top/tags/PHP/"},{"name":"xml转array","slug":"xml转array","permalink":"https://blog.mainguo.top/tags/xml转array/"}]}]}